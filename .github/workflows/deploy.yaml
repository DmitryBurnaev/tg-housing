name: Deploy
on:
  push:
    branches:
      - 'main'
      - 'feature/9-fix-ci'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'main'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
#  test:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v1
#
#      - name: Prepare .env file
#        env:
#          PWD: $(PWD)
#        run: |
#          cp .env.template .env
#          env >> .env
#
#      - name: Build image
#        run: docker-compose build test
#
#      - name: Run tests
#        run: docker-compose up --exit-code-from test test

  build-and-deploy:
#    needs: [test]
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare .env file
        env:
          PWD: $(PWD)
        run: |
          cp .env.template .env
          env >> .env

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}        

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Prepare SSH key
        run: |
          mkdir ~/.ssh
          echo "${{ secrets.SSH_PKEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa

      - name: Copy project files
        run: |
          scp -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT }} ./.env.template ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.PROD_PROJECT_ROOT }}/.env.template
          scp -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT }} ./etc/docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.PROD_PROJECT_ROOT }}/docker-compose.yml
          scp -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT }} ./etc/deploy ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.PROD_PROJECT_ROOT }}/deploy
          scp -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT }} ./etc/service-start ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.PROD_PROJECT_ROOT }}/service-start
          scp -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT }} ./etc/service-stop ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.PROD_PROJECT_ROOT }}/service-stop
          scp -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT }} ./etc/tg-housing.service ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.PROD_PROJECT_ROOT }}/tg-housing.service

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PKEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            export DEPLOY_MODE=CI
            export REGISTRY_URL=${{ env.REGISTRY }}
            export RELEASE_TAGS=${{ steps.meta.outputs.tags }}
            cd ${{ secrets.PROD_PROJECT_ROOT }}
            sh deploy
